{"version":3,"sources":["types/user.ts","hooks/useTypedSelector.ts","types/todo.ts","store/actions/user.ts","store/actions/todo.ts","store/actions/index.ts","hooks/useAction.ts","components/UserList.tsx","components/TodoList.tsx","App.tsx","store/reducers/userReducer.ts","store/reducers/todoReducer.ts","store/index.ts","index.tsx"],"names":["UserActionsTypes","useTypedSelector","useSelector","TodoActionTypes","fetchUsers","dispatch","a","type","FETCH_USERS","axios","get","response","setTimeout","FETCH_USERS_SUCCESS","payload","data","FETCH_USERS_ERROR","fetchTodos","page","limit","FETCH_TODOS","params","_page","_limit","FETCH_TODOS_SUCCESS","FETCH_TODOS_ERROR","setTodosPage","SET_TODOS_PAGE","UserActionCreators","TodosActionCreators","useAction","useDispatch","bindActionCreators","ActionCreators","UserList","state","user","error","isLoading","users","useEffect","map","name","id","TodoList","todo","todos","title","style","display","p","index","onClick","border","padding","App","className","initialState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc74d1ea.chunk.js","sourcesContent":["export interface userState {\r\n    users: any[],\r\n    isLoading: boolean,\r\n    error: null | string\r\n}\r\n\r\nexport enum UserActionsTypes {\r\n    FETCH_USERS = \"FETCH_USERS\",\r\n    FETCH_USERS_SUCCESS = \"FETCH_USERS_SUCCESS\",\r\n    FETCH_USERS_ERROR = \"FETCH_USERS_ERROR\"\r\n}\r\n\r\ninterface FetchUsersAction {\r\n    type: UserActionsTypes.FETCH_USERS\r\n}\r\n\r\ninterface FetchUsersSuccessAction {\r\n    type: UserActionsTypes.FETCH_USERS_SUCCESS,\r\n    payload: any[]\r\n}\r\n\r\ninterface FetchUsersErrorAction {\r\n    type: UserActionsTypes.FETCH_USERS_ERROR,\r\n    payload: string\r\n}\r\n\r\nexport type UserAction = FetchUsersAction | FetchUsersErrorAction |FetchUsersSuccessAction\r\n","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store\";\r\n\r\nexport const useTypedSelector : TypedUseSelectorHook<RootState> = useSelector;","export interface TodoState {\r\n    todos:any[],\r\n    isLoading: boolean,\r\n    error: null | string,\r\n    page: number,\r\n    limit: number\r\n}\r\n\r\nexport enum TodoActionTypes {\r\n    FETCH_TODOS = 'FETCH_TODOS',\r\n    FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS',\r\n    FETCH_TODOS_ERROR = 'FETCH_TODOS_ERROR',\r\n    SET_TODOS_PAGE = 'SET_TODOS_PAGE',\r\n}\r\n\r\ninterface FetchTodosAction {\r\n    type:TodoActionTypes.FETCH_TODOS\r\n}\r\n\r\ninterface FetchTodosSuccessAction {\r\n    type:TodoActionTypes.FETCH_TODOS_SUCCESS,\r\n    payload:any[]\r\n}\r\n\r\ninterface FetchTodosErrorAction {\r\n    type:TodoActionTypes.FETCH_TODOS_ERROR,\r\n    payload:string\r\n}\r\n\r\ninterface SetTodosPage {\r\n    type:TodoActionTypes.SET_TODOS_PAGE,\r\n    payload:number\r\n}\r\n\r\nexport type TodoAction = FetchTodosAction | FetchTodosErrorAction | FetchTodosSuccessAction | SetTodosPage","import {UserAction, UserActionsTypes} from \"../../types/user\";\r\nimport {Dispatch} from \"redux\";\r\nimport axios from \"axios\";\r\n\r\n\r\nexport const  fetchUsers = () => {\r\n    return async (dispatch:Dispatch<UserAction>) =>{\r\n        try {\r\n            dispatch({type:UserActionsTypes.FETCH_USERS})\r\n            const response = await axios.get('https://jsonplaceholder.typicode.com/users')\r\n            setTimeout(()=>dispatch({type:UserActionsTypes.FETCH_USERS_SUCCESS,payload:response.data}),500)\r\n\r\n        }catch (e) {\r\n            dispatch({type:UserActionsTypes.FETCH_USERS_ERROR, payload:'Error'})\r\n        }\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport axios from \"axios\";\r\nimport {TodoAction, TodoActionTypes} from \"../../types/todo\";\r\n\r\n\r\nexport const  fetchTodos = (page = 1, limit = 10) => {\r\n    return async (dispatch:Dispatch<TodoAction>) =>{\r\n        try {\r\n            dispatch({type:TodoActionTypes.FETCH_TODOS})\r\n            const response = await axios.get('https://jsonplaceholder.typicode.com/todos',{\r\n                params:{\r\n                    _page:page,\r\n                    _limit:limit\r\n                }\r\n            })\r\n            setTimeout(()=> dispatch({type:TodoActionTypes.FETCH_TODOS_SUCCESS, payload:response.data}),500)\r\n\r\n        }catch (e) {\r\n            dispatch({type:TodoActionTypes.FETCH_TODOS_ERROR, payload:'Error'})\r\n        }\r\n    }\r\n}\r\n\r\nexport const setTodosPage = (page:number):TodoAction =>{\r\n    return {type:TodoActionTypes.SET_TODOS_PAGE,payload:page}\r\n}","import * as UserActionCreators from './user'\r\nimport * as TodosActionCreators from './todo'\r\n\r\nexport default {\r\n    ...UserActionCreators,\r\n    ...TodosActionCreators\r\n}","import {useDispatch} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport ActionCreators from '../store/actions/'\r\n\r\nexport const useAction = () =>{\r\n    const dispatch = useDispatch()\r\n    return bindActionCreators(ActionCreators,dispatch)\r\n}","import React, {useEffect} from 'react';\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\nimport {fetchUsers} from \"../store/actions/user\";\r\nimport {useAction} from \"../hooks/useAction\";\r\n\r\nconst UserList : React.FC = () => {\r\n\r\n    const {error,isLoading,users} = useTypedSelector(state => state.user)\r\n    const {fetchUsers} = useAction()\r\n\r\n    useEffect(()=>{\r\n        fetchUsers()\r\n    },[])\r\n\r\n    if (isLoading){\r\n        return <h1>Loading...</h1>\r\n    }\r\n    if (error){\r\n        return <h1>Error</h1>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                users.map(user =>\r\n                    <div key={user.id}>\r\n                        {user.name}\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserList;\r\n","import React, {useEffect} from 'react';\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\nimport {useAction} from \"../hooks/useAction\";\r\n\r\nconst TodoList:React.FC = () => {\r\n\r\n    const {isLoading,error,limit,page,todos,} = useTypedSelector(state => state.todo)\r\n    const {fetchTodos,setTodosPage} = useAction()\r\n    const pages = [1,2,3,4,5]\r\n\r\n    useEffect(()=>{\r\n        fetchTodos(page,limit)\r\n    },[page])\r\n\r\n    if (isLoading){\r\n        return <h1>Loading...</h1>\r\n    }\r\n    if (error){\r\n        return <h1>Error</h1>\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                todos.map(todo =>\r\n                    <div key={todo.id}>\r\n                        {todo.id} - {todo.title}\r\n                    </div>\r\n                )\r\n            }\r\n            <div style={{display:\"flex\"}}>\r\n                {\r\n                    pages.map((p,index) =>\r\n                        <div key={index}\r\n                             onClick={() => setTodosPage(p)}\r\n                             style={{border:p === page ? '2px solid #000' : '1px solid gray',padding:10}}\r\n                        >\r\n                            {p}\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport UserList from \"./components/UserList\";\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UserList/>\n      <hr/>\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","import {UserAction, UserActionsTypes, userState} from \"../../types/user\";\r\n\r\nconst initialState: userState = {\r\n    users: [],\r\n    isLoading: false,\r\n    error: null\r\n}\r\n\r\nexport const userReducer = (state = initialState, action: UserAction): userState => {\r\n    switch (action.type) {\r\n        case UserActionsTypes.FETCH_USERS:\r\n            return {isLoading: true, error: null, users: []}\r\n        case UserActionsTypes.FETCH_USERS_SUCCESS:\r\n            return {isLoading: false, error: null, users: action.payload}\r\n        case UserActionsTypes.FETCH_USERS_ERROR:\r\n            return {isLoading: false, error: action.payload, users: []}\r\n        default:\r\n            return state\r\n    }\r\n}","import {TodoAction, TodoActionTypes, TodoState} from \"../../types/todo\";\r\n\r\nconst initialState : TodoState = {\r\n    todos:[],\r\n    isLoading: false,\r\n    error: null,\r\n    page:1,\r\n    limit:10\r\n}\r\n\r\nexport const todoReducer = (state= initialState, action: TodoAction): TodoState => {\r\n    switch (action.type) {\r\n        case TodoActionTypes.FETCH_TODOS:\r\n            return {...state, isLoading:true}\r\n        case TodoActionTypes.FETCH_TODOS_SUCCESS:\r\n            return {...state, isLoading:false, todos:action.payload}\r\n        case TodoActionTypes.FETCH_TODOS_ERROR:\r\n            return {...state, isLoading:false, error:action.payload}\r\n        case TodoActionTypes.SET_TODOS_PAGE:\r\n            return {...state, page:action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {userReducer} from \"./reducers/userReducer\";\r\nimport {todoReducer} from \"./reducers/todoReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    user:userReducer,\r\n    todo:todoReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}